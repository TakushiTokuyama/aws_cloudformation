AWSTemplateFormatVersion: "2010-09-09"
Description: Create VPC_Subnet_EC2_RDS_SecurityGroup
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large

  SSHLocation:
    Description: IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  HttpLocation:
    Description: IP address range that can be used to TCP to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  HttpsLocation:
    Description: IP address range that can be used to TCP to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  TomcatLocation:
    Description: IP address range that can be used to TCP to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  RDSLocation:
    Description: IP address range that can be used to TCP to the RDS
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DBInstanceName:
    Type: String
  DBName:
    Type: String
    Default: "springDB"
    NoEcho: false
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
  DBMasterUserName:
    Type: String
    Default: "user"
    NoEcho: true
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "must begin with a letter and contain only alphanumeric characters."
  DBPassword:
    Default: "11111111"
    NoEcho: true
    Type: String
    MinLength: 8
    MaxLength: 20
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: "must contain only alphanumeric characters."

Resources:
  SpringVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.30.0.0/16
      EnableDnsHostnames: "true"
      EnableDnsSupport: "true"
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: SpringVpc

  SpringIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: springMyIG

  AttachInternetGateWay:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref SpringIGW
      VpcId: !Ref SpringVPC

  PrivateMyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d50a9312588347d8
      InstanceType: !Ref InstanceType
      Tags:
        - Key: Name
          Value: PrivateMyInstance
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !Ref PrivateMySubnetA
          GroupSet:
            - !Ref PrivateInstanceSecurityGroup

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref SpringVPC
      Tags:
        - Key: Name
          Value: entrance-rt

  PrivateRouteTableEntranceSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateMySubnetA
      RouteTableId: !Ref PrivateRouteTable

  EntranceRoute:
    Type: "AWS::EC2::Route"
    Properties:
      GatewayId: !Ref SpringIGW
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  PrivateMySubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpringVPC
      CidrBlock: 172.30.16.0/20
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: PrivateMySubnetA

  PrivateMySubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpringVPC
      CidrBlock: 172.30.32.0/20
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: PublicMySubnetB

  PrivateInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: securityGroupSpringVersion
      VpcId: !Ref SpringVPC
      Tags:
        - Key: Name
          Value: PublicMyInstanceSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref HttpLocation
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref HttpsLocation
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref TomcatLocation

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      AvailabilityZone: ap-northeast-1c
      StorageType: gp2
      BackupRetentionPeriod: 30
      DBInstanceIdentifier: !Ref DBInstanceName
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      Engine: mysql
      EngineVersion: 8.0.16
      MasterUsername: !Ref DBMasterUserName
      MasterUserPassword: !Ref DBPassword
      Port: 3306

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: This is a privateSubnet
      SubnetIds:
        - !Ref PrivateMySubnetA
        - !Ref PrivateMySubnetB

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SpringVPC
      GroupDescription: spring application RDS
      Tags:
        - Key: Name
          Value: springMyRDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref RDSLocation
